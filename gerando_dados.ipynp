# hackathon_itau_insights{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "from random import randrange\n",
    "import datetime \n",
    "from datetime import datetime\n",
    "\n",
    "qt_empresas = 1000\n",
    "qt_transacoes_por_empresa = 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gerarCnpj(self, p = False):\n",
    "    cnpj = [random.randrange(10) for i in range(8)] + [0, 0, 0, 1]\n",
    "    constantes = [2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6]\n",
    "    a = sum(i*j for i,j in zip(reversed(cnpj), constantes))\n",
    "    d1 = 11 - a % 11\n",
    "    if d1 >= 10:\n",
    "      d1 = 0\n",
    "    cnpj.append(d1)\n",
    "    b = sum(i*j for i,j in zip(reversed(cnpj), constantes))\n",
    "    d2 = 11 - b % 11\n",
    "    if d2 >= 10:\n",
    "      d2 = 0\n",
    "    cnpj.append(d2)\n",
    "    if p:\n",
    "      return \"%d%d.%d%d%d.%d%d%d/%d%d%d%d-%d%d\" % tuple(cnpj)\n",
    "    else:\n",
    "      return \"%d%d%d%d%d%d%d%d%d%d%d%d%d%d\" % tuple(cnpj)\n",
    "\n",
    "def finalidade(var):\n",
    "    if var in [\"equipamento\", \"material\",\"entrega\",\"energia\",\"agua\",\"internet\",\"transporte\"]:\n",
    "        return \"debito\"\n",
    "    else:\n",
    "        return \"credito\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "cnpj = pd.DataFrame([gerarCnpj(True) for i in range(qt_empresas)])\n",
    "cnpj.columns = [\"CNPJ\"]\n",
    "cnpj.to_csv(\"CNPJ_gerados.csv\",index=None)\n",
    "id = pd.DataFrame([i+1 for i in range(qt_empresas)])\n",
    "id.columns = [\"id\"]\n",
    "nome = pd.DataFrame([\"empresa \"+str(i) for i in range(qt_empresas)])\n",
    "nome.columns = [\"nome\"]\n",
    "segmentos = [\"Confeitaria\",\"Padaria\",\"Cafe\",\"Lachonete\"]\n",
    "segmento_empresas = pd.DataFrame([segmentos[np.random.choice(len(segmentos))] for k in range(1,qt_empresas)])\n",
    "segmento_empresas.columns = [\"segmentos\"]\n",
    "bairros=[\"vila olimpia\",\"faria lima\",\"itaquera\",\"sao mateus\",\"vila prudente\"]\n",
    "bairro_empresas = pd.DataFrame([bairros[np.random.choice(len(bairros))] for k in range(1,qt_empresas)])\n",
    "bairro_empresas.columns = [\"bairros\"]\n",
    "dados = pd.concat([cnpj,id,nome,segmento_empresas,bairro_empresas],axis=1)\n",
    "dados.to_csv(\"dados_hackathon.csv\",index=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "id_transacao = pd.DataFrame([str(i+1) for i in range(qt_transacoes_por_empresa*qt_empresas)])\n",
    "id_transacao.columns = [\"id\"]\n",
    "id_empresa = pd.DataFrame([id.iloc[np.random.choice(len(id))] for k in range(1,qt_transacoes_por_empresa*qt_empresas)])\n",
    "id_empresa.columns = [\"id_empresa\"]\n",
    "categoria = [\"equipamento\", \"material\",\"entrega\",\"energia\",\"agua\",\"internet\",\"transporte\",\"POS\",\"transferencia\",\"boleto\",\"bandeira do cartao de credito\"]\n",
    "categoria_transacao = pd.DataFrame([categoria[np.random.choice(len(categoria))] for k in range(1,qt_transacoes_por_empresa*qt_empresas)])\n",
    "categoria_transacao.columns = [\"categoria\"]\n",
    "tipo = [\"credito\",\"debito\"]\n",
    "tipo_transacoes=pd.DataFrame(list(map(finalidade,categoria_transacao)))\n",
    "categoria_transacao.columns = [\"tipo\"]\n",
    "valor = pd.DataFrame([random.triangular(1.0, 100,10) for i in range(qt_transacoes_por_empresa*qt_empresas)])\n",
    "valor=round(valor,2)\n",
    "valor.columns = [\"valor\"]\n",
    "mes=[\"janeiro\",\"fevereiro\",\"marco\",\"abril\",\"maio\",\"junho\",\"julho\",\"agosto\",\"outubro\",\"novembro\",\"dezembro\"]\n",
    "mes_transacoes = pd.DataFrame([mes[np.random.choice(len(mes))] for k in range(1,qt_transacoes_por_empresa*qt_empresas)])\n",
    "dia_transacoes = pd.DataFrame([random.uniform(1,30) for k in range(1,qt_transacoes_por_empresa*qt_empresas)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "dados = pd.concat([id_transacao,id_empresa,categoria_transacao,tipo_transacoes,valor,mes],axis=1)\n",
    "dados.to_csv(\"dados_hackathon.csv\",index=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "#id_transacao.to_csv(\"id_transacao.csv\",index=None)\n",
    "#id_empresa.to_csv(\"id_empresa.csv\",index=None)\n",
    "#categoria_transacao.to_csv(\"categoria.csv\",index=None)\n",
    "#tipo_transacoes.to_csv(\"tipo.csv\",index=None)\n",
    "#valor.to_csv(\"valor.csv\",index=None)\n",
    "#mes_transacoes.to_csv(\"mes.csv\",index=None)\n",
    "#dia_transacoes.to_csv(\"dia_transacoes.csv\",index=None)\n",
    "#empresas = pd.read_csv(\"dados_hackathon.csv\")\n",
    "#transacoes = pd.read_csv(\"dados_hackathon2.csv\",sep=\";\")\n",
    "#tudo = empresas.merge(transacoes, left_on='id', right_on='id_empresa', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
